felix js lernings by heart
--------------------------


http://localhost:3000/essentials.html


node init project:
npm init -y

install:
$ npm install babel-core babel-loader webpack-dev-server babel-preset-es2015 babel-polyfill -save-dev


start npm server:
npm start



ES6 stuff:
------------

let & const = block scoped:

let limit = 200;

{
    let limit= 23; // block scoped
    console.log(limit) // limit: 23
}
console.log(limit) // 200

const is read-only! no re-declaration or re-assignement
(updating data, like =' modify data. )
BUT: you can modify the value of an array, add another value.
with push or unshift methods


// template strings
let birthday = `happy birthday`;
let greetings = `${birthday} mr. president`;


// spread operator
function collect(...a) {
    console.log('a: ', a);
}
collect(21, 3, 44, teamA);



// Destructuring on arrays

    let animals = ['simba', 'sumsi', 'frank', 'penny'];
    let [dog, bird] = animals;

    console.log(dog, bird);

// Destructuring assignements on objects

    let king = {
        name: 'Lionbaby King',
        kids: 2,
        hobbies: 'hunting, lying arround'
    }
    let {name, hobbies} = king;

    console.log("from an object", name, hobbies);




// map methods

the map method creates NEW arrays by calling a function on individual
elements in an ORGINAL array.
    // map helper function
    let values = [20, 30, 44];

    let doubled = values.map((n) => {
        return n*2;
    });

    console.log("doubled", doubled);


// filter method
the filter method creates NEW arrays based on an original array around a certain
test on each of its element.

    // filter method return everything bigger than 20:
    let points = [7, 8, 65, 3, 13, 34, 32, 15, 34, 3];

    let highScores = points.filter((n) => {
        return n > 20;
    });

    console.log(highScores);




string manipulation and number checking

string.repeat() returns a new string of concatenaded copies.

let feeling = "wooohh" + "oo".repeat(50);
console.log(feeling);

console.log("butterfly".startsWith("butter"));
console.log("butterfly".endsWith("fly"));
console.log("butterfly".includes("ter"));
console.log("felix.adem@webkanal.ch".includes("@"));




// es6 modules
import and exports from other files..
